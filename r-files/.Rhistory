color=Block)) +
geom_point() +
geom_line() +
scale_x_discrete(limits=c('Nose','Rear','None')) +
labs(x='Paperclip Placement',
y='Distance Traveled (in)',
title='Paper plane flight distance with various paperclip placement')
# Make graph
plane_data %>%
ggplot(aes(x=Treatment,
y=Distance,
group=Block,
color=Block)) +
geom_point() +
geom_line() +
scale_x_discrete(limits=c('Nose','Rear','None')) +
labs(x='Paperclip Placement',
y='Distance Traveled (in)',
title='Plane flight distance with various paperclip placement')
# Make graph
plane_data %>%
ggplot(aes(x=Treatment,
y=Distance,
group=Block,
color=Block)) +
geom_point() +
geom_line() +
scale_x_discrete(limits=c('Nose','Rear','None')) +
labs(x='Paperclip Placement',
y='Distance Traveled (in)',
title='Plane flight distance with various paperclip placement',
subtitle='Fig.1')
# Run ANOVA test
model <- aov(distance~treatment+block, data=plane_data)
# Run ANOVA test
model <- aov(Distance~Treatment+Block, data=plane_data)
# Run ANOVA test
model <- aov(Distance~Treatment+Block, data=plane_data)
summary(model)
# Load necessary packages
library(readxl)
library(ggplot2)
library(dplyr)
library(knitr)
# Input data
plane_data <- read_excel('Lab5_AirplaneData.xlsx')
# Make graph
plane_data %>%
ggplot(aes(x=Treatment,
y=Distance,
group=Block,
color=Block)) +
geom_point() +
geom_line() +
scale_x_discrete(limits=c('Nose','Rear','None')) +
labs(x='Paperclip Placement',
y='Distance Traveled (in)',
title='Plane flight distance with various paperclip placement',
subtitle='Fig.1')
# Run ANOVA test
model <- aov(Distance~Treatment+Block, data=plane_data)
model_summary <- summary(model)
kable(model_summary)
kable(model_summary[[1]])
# Input data
mix1 <- c(3129,3000,2865,2890)
mix2 <- c(3200,3300,2975,3150)
mix3 <- c(2800,2900,2985,3050)
mix4 <- c(2600,2700,2600,2765)
# Convert vector data to df
mixing_df <- data.frame(
strength=c(mix1,mix2,mix3,mix4),
method=c(rep('mix1', length(mix1)),
rep('mix2', length(mix2)),
rep('mix3', length(mix3)),
rep('mix4', length(mix4)))
)
# Compute group means
mixing_means <- mixing_df %>%
group_by(method) %>%
summarise(means=mean(strength))
kable(mixing_means)
# Input data
mix1 <- c(3129,3000,2865,2890)
mix2 <- c(3200,3300,2975,3150)
mix3 <- c(2800,2900,2985,3050)
mix4 <- c(2600,2700,2600,2765)
# Convert vector data to df
mixing_df <- data.frame(
strength=c(mix1,mix2,mix3,mix4),
method=c(rep('mix1', length(mix1)),
rep('mix2', length(mix2)),
rep('mix3', length(mix3)),
rep('mix4', length(mix4)))
)
# Run ANOVA model
model <- aov(strength~method, data=mixing_df)
# Run TukeyHSD to see pairwise comparisons of model
TukeyHSD(model)
# Create a vector to store the F values
perm_f <- NA
# set the number of replications
reps <- 10000
# do it lots of times in a loop
for(i in 1:reps){
firing_perm <- firing_df
nav_firing$time <- sample(nav_perm$time)
perm_f[i] <- summary(aov(time ~ method,
data=nav_perm))[[1]][1,4]
}
# Input data
t100 <- c(21.8,21.9,21.7,21.6,21.7)
t125 <- c(21.7,21.4,21.5,21.4)
t150 <- c(21.9,21.8,21.8,21.6,21.5)
t175 <- c(21.9,21.7,21.8,21.4)
# Convert vector data to df
firing_df <- data.frame(
density=c(t100,t125,t150,t175),
method=c(rep('100', length(t100)),
rep('125', length(t125)),
rep('150', length(t150)),
rep('175', length(t175)))
)
# Create a vector to store the F values
perm_f <- NA
# set the number of replications
reps <- 10000
# do it lots of times in a loop
for(i in 1:reps){
firing_perm <- firing_df
nav_firing$time <- sample(nav_perm$time)
perm_f[i] <- summary(aov(time ~ method,
data=nav_perm))[[1]][1,4]
}
View(firing_df)
# Create a vector to store the F values
perm_f <- NA
# set the number of replications
reps <- 10000
# do it lots of times in a loop
for(i in 1:reps){
firing_perm <- firing_df
nav_firing$density <- sample(nav_perm$density)
perm_f[i] <- summary(aov(density ~ method,
data=firing_perm))[[1]][1,4]
}
# Create a vector to store the F values
perm_f <- NA
# set the number of replications
reps <- 10000
# do it lots of times in a loop
for(i in 1:reps){
firing_perm <- firing_df
firing_perm$density <- sample(firing_perm$density)
perm_f[i] <- summary(aov(density ~ method,
data=firing_perm))[[1]][1,4]
}
# calculate F value of actual data
F <- summary(aov(density ~ method,
data=firing_df))[[1]][1,4]
# Calculate proportion of perm_f that is at least as extreme
sum(perm_f >= F)/reps
# Create a vector to store the F values
perm_f <- NA
# set the number of replications
reps <- 1000
# do it lots of times in a loop
for(i in 1:reps){
firing_perm <- firing_df
firing_perm$density <- sample(firing_perm$density)
perm_f[i] <- summary(aov(density ~ method,
data=firing_perm))[[1]][1,4]
}
# calculate F value of actual data
F <- summary(aov(density ~ method,
data=firing_df))[[1]][1,4]
# Calculate proportion of perm_f that is at least as extreme
sum(perm_f >= F)/reps
knitr::opts_chunk$set(echo = TRUE)
# Load necessary packages
library(readxl)
library(ggplot2)
library(dplyr)
# Input data
vascgraft_data <- read_excel('VascGraft.xlsx')
model1 <- aov(yield ~ as.factor(PSI) + as.factor(block), data=vascgraft_data)
summary(model1)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary packages
library(readxl)
library(dplyr)
# Input data
vascgraft_data <- read_excel('VascGraft.xlsx')
View(vascgraft_data)
# Find group means and group variance
sum_stats <- vascgraft_data %>%
group_by(PSI) %>%
summarise(mean=mean(yield), var=var(yield))
library(knitr)
kable(sum_stats)
kable(sum_stats)
# Worst case sample size calculation
groupmeans <- sum_stats$mean
power.anova.test(groups=length(groupmeans),
between.var=var(groupmeans),
within.var=21,
power=0.8, sig.level=0.05, n=NULL)
kable(sum_stats)
# Best case sample size calculation
power.anova.test(groups=length(groupmeans),
between.var=var(groupmeans),
within.var=8,
power=0.8, sig.level=0.05, n=NULL)
knitr::opts_chunk$set(message =  FALSE)
knitr::opts_chunk$set(warning =  FALSE)
knitr::opts_chunk$set(error =  FALSE)
bfcolor <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{\\textbf{%s}}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'><b>%s</b></span>", color, x)
} else x
}
# Read in data
library(readxl)
library(tidyverse)
academic_data <- read_excel('Academic Balance.xlsx')
View(academic_data)
model <- lm(GPA ~ `Study Time` + `Class Attendance`,
data=academic_data)
summary(model)
aov(GPA ~ `Study Time` + `Class Attendance`,
data=academic_data)
summaey(aov(GPA ~ `Study Time` + `Class Attendance`,
data=academic_data))
summary(aov(GPA ~ `Study Time` + `Class Attendance`,
data=academic_data))
library(knitr)
model <- lm(GPA ~ `Study Time` + `Class Attendance`,
data=academic_data)
kable(summary(model)$coefficients)
data(mtcars)
lm(mpg~hp+wt+cyl, data=mtcars)
summary(lm(mpg~hp+wt+cyl, data=mtcars))
View(mtcars)
setwd("C:/Users/tasha/OneDrive/Desktop/PSTAT 126/Final/obesity-regression-project/r-files")
knitr::opts_chunk$set(message =  FALSE)
knitr::opts_chunk$set(warning =  FALSE)
knitr::opts_chunk$set(error =  FALSE)
bfcolor <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{\\textbf{%s}}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'><b>%s</b></span>", color, x)
} else x
}
library(readxl)
# Input data
obesityData <- read_excel('data-updated.xlsx')
# Input data
obesityData <- read_excel('data-updated.xls')
getwd()
# Input data
obesityData <- read_excel("../data/data-updated.xlsx")
# Input data
obesityData <- read_excel("C:\Users\tasha\OneDrive\Desktop\PSTAT 126\Final\obesity-regression-project\data")
# Input data
obesityData <- read_excel("C:/Users/tasha/OneDrive/Desktop/PSTAT 126/Final/obesity-regression-project/data")
# Input data
obesityData <- read_excel("C:/Users/tasha/OneDrive/Desktop/PSTAT 126/Final/obesity-regression-project/data/data-updated.xlsx")
file.exists("../data/data.xlsx")
data <- read_excel("..\\data\\data.xlsx")
# Input data
obesityData <- read_excel("data-updated.xlsx")
library(readxl)
# Input data
obesityData <- read_excel("data-updated.xlsx")
setwd("C:/Users/tasha/OneDrive/Desktop/PSTAT 126/Final/obesity-regression-project/r-files")
getwd
getwd()
library(readxl)
# Input data
obesityData <- read_excel("data-updated.xlsx")
setwd("C:/Users/tasha/OneDrive/Desktop/PSTAT 126/Final")
knitr::opts_chunk$set(message =  FALSE)
knitr::opts_chunk$set(warning =  FALSE)
knitr::opts_chunk$set(error =  FALSE)
bfcolor <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{\\textbf{%s}}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'><b>%s</b></span>", color, x)
} else x
}
library(readxl)
# Input data
obesityData <- read_excel("data-updated.xlsx")
# Input data
obesityData <- read_excel("BMI_data.xlsx")
# Input data
obesityData <- read_excel("BMI_data.csv")
# Input data
obesityData <- read.csv("BMI_data.csv")
# Input data
obesityData <- read.csv("data-updated.csv")
View(obesityData)
# Input data
obesityData <- read.csv("BMI_data.csv")
# Input data
obesityData <- read.csv("BMI_data.csv")
setwd("C:/Users/tasha/OneDrive/Desktop/PSTAT 126/Final/obesity-regression-project/r-files")
# Input data
obesityData <- read.csv("../data/BMI_data.csv")
# Input data
obesityData <- read.csv("../data/BMI_data.csv")
View(obesityData)
# Fit linear model
BMIonAge <- lm(BMI ~ Age, data=obesityData)
# Load packages
library(kable)
# Load packages
library(knitr)
summary(BMIonAge)
kable(summary(BMIonAge))
kable(summary(BMIonAge)[[1]])
summary(BMIonAge)
kable(summary(BMIonAge)$coefficients)
caption = 'Simple Linear Regression of BMI on Age")
kable(summary(BMIonAge)$coefficients,
caption = 'Simple Linear Regression of BMI on Age')
kable(summary(BMIonAge)$coefficients,
caption = 'Simple Linear Regression of BMI on Age')
plot(obesityData$BMI, obesityData$Age)
View(obesityData)
plot(obesityData$BMI, obesityData$FAF)
# Fit linear model
BMIonFAF <- lm(BMI ~ FAF, data=obesityData)
kable(summary(BMIonFAF)$coefficients,
caption = 'Simple Linear Regression of BMI on Fequency of Exercise')
# Fit linear model
BMIonFAF <- lm(BMI ~ FAF, data=obesityData)
kable(summary(BMIonFAF)$coefficients,
caption = 'Fig. X: Simple Linear Regression of BMI on Fequency of Exercise')
summary(BMIonFAF)$coefficients
unique(obesityData$FAF)
summary(BMIonFAF)
-1.672&-0.3955
-1.672-0.3955
-1.672+0.3955
# Check calculation
confint(BMIonFAF)
# Check calculation using R function
kable(confint(BMIonFAF))
# Check calculation using R function
kable(confint(BMIonFAF),
caption = 'Confidence Interval Calculation by R')
library(ggplot2)
remove(BMIonAge)
# Load packages
library(knitr)
library(ggplot2)
library(dplyr)
# Input data
obesityData <- read.csv("../data/BMI_data.csv")
data.frame(fitted_values, residuals) %>%
ggplot(aes(x = fitted_values,
y = residuals)) +
geom_point() +
# geom_hline(yintercept = 0, color = "red") +
labs(title = "Residuals vs Fitted", x = "Fitted Values", y = "Residuals") +
theme_minimal()
# Generate residual plot
# Create residuals and fitted values
residuals <- resid(BMIonFAF)
fitted_values <- fitted(BMIonFAF)
data.frame(fitted_values, residuals) %>%
ggplot(aes(x = fitted_values,
y = residuals)) +
geom_point() +
# geom_hline(yintercept = 0, color = "red") +
labs(title = "Residuals vs Fitted", x = "Fitted Values", y = "Residuals") +
theme_minimal()
data.frame(fitted_values, residuals) %>%
ggplot(aes(x = fitted_values,
y = residuals)) +
geom_point() +
# geom_hline(yintercept = 0, color = "red") +
labs(title = "Fig. Y: Residuals vs Fitted Values",
x = "Fitted Values",
y = "Residuals") +
theme_minimal()
data.frame(fitted_values, residuals) %>%
ggplot(aes(x = fitted_values,
y = residuals)) +
geom_point() +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Fig. Y: Residuals vs Fitted Values",
x = "Fitted Values",
y = "Residuals") +
theme_minimal()
data.frame(fitted_values, residuals) %>%
ggplot(aes(x = fitted_values,
y = residuals)) +
geom_point() +
labs(title = "Fig. Y: Residuals vs Fitted Values",
x = "Fitted Values",
y = "Residuals") +
theme_minimal()
kable(summary(BMIonFAF)$coefficients,
caption = 'Fig. X: Simple Linear Regression of BMI on Fequency of Physical Activity')
# Fit linear model
BMIonFAF <- lm(BMI ~ FAF, data=obesityData)
BMIonFAF_sum <- summary(BMIonFAF)
BMIonFAF_sum$coefficients <- as.character(signif(
BMIonFAF_sum$coefficients, 4))
kable(BMIonFAF_sum$coefficients,
caption = 'Fig. X: Simple Linear Regression of BMI on Fequency of Physical Activity')
# Fit linear model
BMIonFAF <- lm(BMI ~ FAF, data=obesityData)
BMIonFAF_sum <- summary(BMIonFAF)
BMIonFAF_sum$coefficients <- matrix(as.character(signif(
BMIonFAF_sum$coefficients, 4)))
kable(BMIonFAF_sum$coefficients,
caption = 'Fig. X: Simple Linear Regression of BMI on Fequency of Physical Activity')
# Get the summary of the model
BMI_FAF_summary <- summary(BMIonFAF)
# Format the coefficients and p-values
BMI_FAF_summary$coefficents[,4] <-
format.pval(BMI_FAF_summary$coefficents[, 4],                                               digits = 4)
BMI_FAF_summary$coefficents[,4]
# Fit linear model
BMIonFAF <- lm(BMI ~ FAF, data=obesityData)
# Get the summary of the model
BMIomFAF_summary <- summary(BMIonFAF)
# Format the coefficients and p-values
formatted_coefficients <- BMIonFAF_summary$coefficients
# Fit linear model
BMIonFAF <- lm(BMI ~ FAF, data=obesityData)
# Get the summary of the model
BMIonFAF_summary <- summary(BMIonFAF)
# Format the coefficients and p-values
formatted_coefficients <- BMIonFAF_summary$coefficients
formatted_coefficients[, 4] <-
format.pval(formatted_coefficients[, 4], digits = 4)
kable(formatted_coefficients,
caption = 'Fig. X: Simple Linear Regression of BMI on Fequency of Physical Activity')
# Format the coefficients and p-values
formatted_coefficients <- formatC(BMIonFAF_summary$coefficients,
format='f',
digits = 4)
# Fit linear model
BMIonFAF <- lm(BMI ~ FAF, data=obesityData)
# Get the summary of the model
BMIonFAF_summary <- summary(BMIonFAF)
# Format the coefficients and p-values
formatted_coefficients <- formatC(BMIonFAF_summary$coefficients,
format='f',
digits = 4)
kable(formatted_coefficients,
caption = 'Fig. X: Simple Linear Regression of BMI on Fequency of Physical Activity')
# Fit linear model
BMIonFAF <- lm(BMI ~ FAF, data=obesityData)
# Get the summary of the model
BMIonFAF_summary <- summary(BMIonFAF)
# Format the coefficients and p-values
formatted_coefficients <- matrix(as.character(signif(
BMIonFAF_summary$coefficients, 4)), ncol = 4)
colnames(formatted_coefficients) <- c("Estimate", "Std. Error",
"t value", "p-value")
kable(formatted_coefficients,
caption = 'Fig. X: Simple Linear Regression of BMI on Fequency of Physical Activity')
BMIonFAF_summary
BMIonFAF_summary$coefficients
# Fit linear model
BMIonFAF <- lm(BMI ~ FAF, data=obesityData)
# Get the summary of the model
BMIonFAF_summary <- summary(BMIonFAF)
# Format the coefficients and p-values
formatted_coefficients <- matrix(as.character(signif(
BMIonFAF_summary$coefficients, 4)), ncol = 4)
colnames(formatted_coefficients) <- c("Estimate", "Std. Error",
"t value", "p-value")
rownames(formatted_coefficients) <- c('Intercept',
'Frequency of physical activity')
kable(formatted_coefficients,
caption = 'Fig. X: Simple Linear Regression of BMI on Fequency of Physical Activity')
# Fit linear model
BMIonFAF <- lm(BMI ~ FAF, data=obesityData)
# Get the summary of the model
BMIonFAF_summary <- summary(BMIonFAF)
# Format the coefficients and p-values
formatted_coefficients <- matrix(as.character(signif(
BMIonFAF_summary$coefficients, 4)), ncol = 4)
colnames(formatted_coefficients) <- c("Estimate", "Std. Error",
"t value", "p-value")
rownames(formatted_coefficients) <- c('Intercept',
'Frequency of\nphysical activity')
kable(formatted_coefficients,
caption = 'Fig. X: Simple Linear Regression of BMI on Fequency of Physical Activity')
# Fit linear model
BMIonFAF <- lm(BMI ~ FAF, data=obesityData)
# Get the summary of the model
BMIonFAF_summary <- summary(BMIonFAF)
# Format the coefficients and p-values
formatted_coefficients <- matrix(as.character(signif(
BMIonFAF_summary$coefficients, 4)), ncol = 4)
colnames(formatted_coefficients) <- c("Estimate", "Std. Error",
"t value", "p-value")
rownames(formatted_coefficients) <- c('Intercept',
'Frequency of\\physical activity')
kable(formatted_coefficients,
caption = 'Fig. X: Simple Linear Regression of BMI on Fequency of Physical Activity')
